PSUEDOCODE
SPLIT (List, lower, upper, pivot_loc)
  { Split List[lower .. upper] into two parts, those less than
  List[pivot_loc] on the left and those greater than it on the right.
  Return the pivot's new position.
  upper ≥ pivot_loc ≥ lower > 0. }

  pivot <- List[pivot_loc]
  List[lower] <-> List[pivot_loc] ; pivot_loc <- lower
  for index from lower + 1 to upper
    if pivot > List[index]
       pivot_loc <- pivot_loc +1
       List[index] <-> List[pivot_loc]
  List[lower] <-> List[pivot_loc]
  return pivot_loc

SELECT ( List, lower, upper, i)
  { Find the index of the ith largest of List[lower .. upper].
  Use the list Medians[1 .. [n/5]] as extra storage.
  upper > lower > 0; upper - lower + 1 ≥ i ≥ 1. }

  n <- upper - lower + 1
  for j from 0 to [n/5] - 1
    Medians[j + 1] <- median of List[(lower +5j) .. (lower + 5j + 4)]
  if n is not a multiple of 5
    Medians[[n/5]] <- median of the remaining elements of List

  index <- SELECT (Medians, 1, [n/5], [n/10])
  Make index the index of the corresponding element of List
  pivot_loc <- SPLIT (List, lower, upper, index)
  case upper - pivot_loc
    <i - 1 :
      SELECT (List, lower, pivot loc - 1, i - upper +pivot_loc -1)
    =i-1:
      return pivot_loc
    >i- 1 :
      SELECT (List,pivot_loc + 1, upper, i)