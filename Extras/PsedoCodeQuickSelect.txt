PSUEDOCODE
SPLIT (List, lower, upper, pivot_loc)
  { Split List[lower .. upper] into two parts, those less than
  List[pivot_loc] on the left and those greater than it on the right.
  Return the pivot's new position.
  upper ≥ pivot_loc ≥ lower > 0. }

  pivot <- List[pivot_loc]
  List[lower] <-> List[pivot_loc] ; pivot_loc <- lower
  for index from lower + 1 to upper
    if pivot > List[index]
       pivot_loc <- pivot_loc +1
       List[index] <-> List[pivot_loc]
  List[lower] <-> List[pivot_loc]
  return pivot_loc


FIND (List, lower, upper, i)
  { Find the index of the ith largest of List[lower..upper].
  upper >= lower > 0; upper - lower + 1 ≥ i ≥ 1. }

  index <- uniform(lower, upper)
  pivot_loc <- SPLIT(List, lower, upper, index)
  case upper - pivot_loc
    < i- 1 :
      FIND (List,lower,pivot_loc - 1, i - upper + pivot_loc -1)
    =  i-1:
      return pivot_loc
    > i-1 :
      FIND (List,pivot_loc+1, upper,i)